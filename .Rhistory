setwd("~/GitHub/Airbnb-New/Data")
#Importing the required libraries
library(randomForest)
require(caTools)
library(readr)
library(ROCR)
set.seed(12345)
df <- read_csv("C:\\Users\\Aishwarya\\Documents\\GitHub\\Airbnb-New\\train.csv")
df <- read_csv("C:\\Users\\Aishwarya\\Documents\\GitHub\\Airbnb-New\\Data\\train.csv")
## Randomly partition the data into 30% validation data and the remaining 70% data.
test_instn = sample(nrow(df), 0.3*nrow(df))
df_valid <- df[test_instn,]
## Save the rest of the data as the data that isn't validation
df_train <- df[-test_instn,]
#Check for any NAs
which(is.na(df_train))
df_train$high_booking_rate <- as.factor(df_train$high_booking_rate)
df_valid$high_booking_rate <- as.factor(df_valid$high_booking_rate)
#names(df_train)
#View(df)
#,"city_centrality","neighbourhood_restaurant",
#"maximum_nights","num_listings"
drop <-c("X1","X1_1")
df_valid <- df_valid[,-which(names(df_valid) %in% drop)]
df_train <- df_train[,-which(names(df_train) %in% drop)]
sum(is.na(df_train))
#best model, with tuned hyperparameters
rf<- randomForest(high_booking_rate~.,data = (df_train),
n_estimators = 50, min_sample_leaf = 80, mtry = 14,
na.rm = TRUE)
pred_valid = predict(rf, newdata=df_valid)
mc = table(df_valid$high_booking_rate, pred_valid)
mc
acc = (mc[1] + mc[4])/sum(mc)
acc
#best model, with tuned hyperparameters
rf<- randomForest(high_booking_rate~.,data = (df_train),
n_estimators = 50, min_sample_leaf = 80, mtry = 45,
na.rm = TRUE)
pred_valid = predict(rf, newdata=df_valid)
mc = table(df_valid$high_booking_rate, pred_valid)
mc
acc = (mc[1] + mc[4])/sum(mc)
acc
#----Alternatively:
library(caret)
model <- train(
high_booking_rate~.,
tuneLength = 1,
data = df_train,
method = "ranger"
#trControl = trainControl(
#  method = "cv",
#  number = ,
#  verboseIter = TRUE
#)
)
print(model)
pred_valid = predict(model, newdata=df_valid)
mc = table(df_valid$high_booking_rate, pred_valid)
acc = (mc[1] + mc[4])/sum(mc)
acc #0.8364771
lambdaValues <- 10^seq(-3, 3, length = 100)
fitRidge <- train(as.factor(high_booking_rate)  ~ .
, family='binomial', data=df, method='glmnet', trControl=trainControl(method='cv', number=10), tuneGrid = expand.grid(alpha=0, lambda=lambdaValues))
varImp(fitRidge)$importance %>%
#rownames_to_column(var = "Variable") %>%
mutate(Importance = scales::percent(Overall/100)) %>%
arrange(desc(Overall)) %>%
as_tibble()
library(dplyr)
varImp(fitRidge)$importance %>%
#rownames_to_column(var = "Variable") %>%
mutate(Importance = scales::percent(Overall/100)) %>%
arrange(desc(Overall)) %>%
as_tibble()
plot(varImp(fitRidge))
